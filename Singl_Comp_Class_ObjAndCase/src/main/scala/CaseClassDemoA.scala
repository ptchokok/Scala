case class Car  (name: String , model: String) {
  val carName = name
  val carModel = model

  def printDetail(): Unit ={
    print (s"car Name is : ${carName} and Model is :${carModel}")
  }
}


object CaseClassDemoA {
  def main(args: Array[String]): Unit = {
    val bmw = Car("BMW","550")  //1.  **NO NEED TO WRITE "NEW" IN CASE CLASS
    bmw.printDetail()
   // bmw.name ="B.M.W" // 2. Constructor parameter is val by default mutator method is not generated
    // when it is val , I can not change the value, but when it is var I can change the value

    bmw match { case Car(a,b) => print(a,b)}  // 3. there is  an autogenerate unapply method used for matching

    //4. it Autogenerates Copy method
    val mercedes = bmw.copy(name="mercedes")  // copy  the name and change the name
    mercedes.printDetail()


    // 5. it Autogenerate hascode method
    // toaString method is autogenerated



  }                                           // it used for pattern matching

}
